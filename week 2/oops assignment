class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def append(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
            print(f"Appended: {data}")
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
        print(f"Appended: {data}")

    def print_list(self):
        if self.is_empty():
            print("Linked list is empty.")
            return

        elements = []
        current_node = self.head
        while current_node:
            elements.append(str(current_node.data))
            current_node = current_node.next
        print("Current list: " + " -> ".join(elements))

    def delete_nth_node(self, n):
        if self.is_empty():
            raise ValueError("Cannot delete from an empty list.")

        if not isinstance(n, int) or n <= 0:
            raise ValueError("Index 'n' must be a positive integer.")

        if n == 1:
            deleted_data = self.head.data
            self.head = self.head.next
            print(f"Deleted 1st node with data: {deleted_data}")
            return

        current_node = self.head
        prev_node = None
        count = 1

        while current_node is not None and count < n:
            prev_node = current_node
            current_node = current_node.next
            count += 1

        if current_node is None:
            raise IndexError(f"Index {n} is out of range. List has fewer than {n} nodes.")

        if prev_node:
            deleted_data = current_node.data
            prev_node.next = current_node.next
            suffix = "th"
            if n == 2: suffix = "nd"
            elif n == 3: suffix = "rd"
            elif n == 1: suffix = "st" 

            print(f"Deleted {n}{suffix} node with data: {deleted_data}")
        else:
            raise RuntimeError("Unexpected state: prev_node is None for n > 1 when deleting a non-head node.")



if __name__ == "__main__":
    my_list = LinkedList()

    
    print("--- Initial Empty List ---")
    my_list.print_list()

    
    print("\n--- Attempting to delete from empty list ---")
    try:
        my_list.delete_nth_node(1)
    except ValueError as e:
        print(f"Error: {e}")


    print("\n--- Appending Elements ---")
    my_list.append(10)
    my_list.append(20)
    my_list.append(30)
    my_list.append(40)
    my_list.append(50)
    my_list.print_list() 
    
    print("\n--- Deleting 1st Node ---")
    try:
        my_list.delete_nth_node(1)
        my_list.print_list() # Expected: 20 -> 30 -> 40 -> 50
    except (ValueError, IndexError, RuntimeError) as e:
        print(f"Error: {e}")

   
    print("\n--- Deleting 3rd Node ---")
    try:
        my_list.delete_nth_node(3) 
        my_list.print_list() 
    except (ValueError, IndexError, RuntimeError) as e:
        print(f"Error: {e}")

    
    print("\n--- Deleting Last Node (current 3rd) ---")
    try:
        my_list.delete_nth_node(3)
        my_list.print_list() 
    except (ValueError, IndexError, RuntimeError) as e:
        print(f"Error: {e}")

    
    print("\n--- Attempting to delete with invalid index (0) ---")
    try:
        my_list.delete_nth_node(0)
    except ValueError as e:
        print(f"Error: {e}")

    
    print("\n--- Attempting to delete with out-of-range index (5) ---")
    try:
        my_list.delete_nth_node(5)
        my_list.print_list()
    except IndexError as e:
        print(f"Error: {e}")
    my_list.print_list() 
    
    print("\n--- Deleting Remaining Nodes ---")
    try:
        my_list.delete_nth_node(1) 
        my_list.print_list() 
        my_list.delete_nth_node(1) 
        my_list.print_list() 
    except (ValueError, IndexError, RuntimeError) as e:
        print(f"Error: {e}")

    
    print("\n--- Attempting to delete from empty list again ---")
    try:
        my_list.delete_nth_node(1)
    except ValueError as e:
        print(f"Error: {e}")

    
    print("\n--- Re-populating the list ---")
    my_list.append(100)
    my_list.append(200)
    my_list.print_list() 
    try:
        my_list.delete_nth_node(2) 
        my_list.print_list() 
    except (ValueError, IndexError, RuntimeError) as e:
        print(f"Error: {e}")
